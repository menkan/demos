/**
 * 策略Pattern
 * Description: 策略模式将不同算法进行合理的分类和单独封装,让不同算法之间可以相互替换而不影响到算法的使用者
 * 
 * effect:
 * 实现不同,作用一致
 * 调用调用方式相同,降低了使用成本以及不同算法之间的耦合
 * 单独定义算法模型,方便单元测试
 * 避免大量冗余的代码判断例如If,else等
 * 
 * case:
 * 实现更优雅的表单验证
 * 游戏里的角色积分器
 * 棋牌类游戏的输赢算法
 */

const obj = {
  a: (num) => num * 4,
  b: (num) => num * 6,
};

const getSum = (type, num) => (obj[type](num))
